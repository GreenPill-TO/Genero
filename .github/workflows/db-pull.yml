name: Supabase Pull Drift (cloud → repo)

on:
  workflow_dispatch: {}        # run manually from Actions tab
  schedule:
    - cron: "0 6 * * *"        # optional: daily at 06:00 UTC

jobs:
  pull-remote-changes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - uses: supabase/setup-cli@v1
        # with:
        #   version: 1.155.4     # (optional) pin CLI version

      # If you committed project_id already, this prints it; otherwise it writes it.
      - name: Ensure supabase/config.toml has project_id
        run: |
          mkdir -p supabase
          if [ ! -f supabase/config.toml ] || ! grep -q '^project_id' supabase/config.toml; then
            echo 'project_id = "${{ secrets.SUPABASE_PROJECT_REF }}"' > supabase/config.toml
          fi
          echo "----- config.toml -----"
          cat supabase/config.toml

      - name: Link to Supabase project
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}

      - name: Generate drift migration from LIVE (linked) project
        id: diff
        run: |
          set -e
          ts=$(date -u +"%Y%m%d%H%M%S")
          out="supabase/migrations/${ts}_remote_drift.sql"

          echo "Diffing LIVE project (linked) → $out"
          # List every schema you want to track:
          supabase db diff \
            --linked \
            --schema public \
            --schema storage \
            --schema auth \
            -f "$out" || true

          echo "----- ls supabase/migrations -----"
          ls -la supabase/migrations || true

          if [ -s "$out" ]; then
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
            echo "file=$out" >> "$GITHUB_OUTPUT"
            echo "Generated migration:"
            head -n 50 "$out" || true
          else
            rm -f "$out"
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            echo "No drift detected (or empty diff)."
          fi

      - name: Open/Update PR with drift migration
        if: steps.diff.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          title: "chore(db): sync remote schema drift"
          commit-message: "chore(db): add migration generated from remote schema drift"
          branch: chore/db-remote-drift
          base: main
          add-paths: |
            supabase/migrations/**
          body: |
            Generated by `supabase db diff --linked` from the live project.
            Schemas included: public, storage, auth.
            Review & merge to keep Git the source of truth.
