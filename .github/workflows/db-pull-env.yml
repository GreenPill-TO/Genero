name: Supabase Pull Drift (select env → repo)

on:
  workflow_dispatch:
    inputs:
      target:
        type: choice
        description: Which environment to diff?
        default: DEV
        options: [DEV, PREVIEW, PROD]

jobs:
  pull-remote-changes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1

      - name: Ensure migrations folder
        run: |
          mkdir -p supabase/migrations
          ls -la supabase/migrations || true

      # Build a safe DB URL for the chosen env by URL-encoding the raw password.
      - name: Build DB URL
        id: makeurl
        env:
          INPUT_TARGET: ${{ github.event.inputs.target }}
          # project refs
          PROD_REF:    ${{ secrets.SUPABASE_PROJECT_REF_PROD }}
          PREVIEW_REF: ${{ secrets.SUPABASE_PROJECT_REF_PREVIEW }}
          DEV_REF:     ${{ secrets.SUPABASE_PROJECT_REF_DEV }}
          # raw passwords
          PROD_PASS:    ${{ secrets.SUPABASE_DB_PASSWORD_PROD }}
          PREVIEW_PASS: ${{ secrets.SUPABASE_DB_PASSWORD_PREVIEW }}
          DEV_PASS:     ${{ secrets.SUPABASE_DB_PASSWORD_DEV }}
        run: |
          set -e

          pick_host () {
            local ref="$1"
            echo "db.${ref}.supabase.co"
          }

          # choose ref/password by input
          case "$INPUT_TARGET" in
            PROD)
              HOST=$(pick_host "$PROD_REF")
              PASS="$PROD_PASS"
              ;;
            PREVIEW)
              HOST=$(pick_host "$PREVIEW_REF")
              PASS="$PREVIEW_PASS"
              ;;
            DEV|*)
              HOST=$(pick_host "$DEV_REF")
              PASS="$DEV_PASS"
              ;;
          esac

          # URL-encode password safely
          ENC_PASS=$(node -e "process.stdout.write(encodeURIComponent(process.env.PASS || ''))")

          DB_URL="postgresql://postgres:${ENC_PASS}@${HOST}:5432/postgres?sslmode=require"
          echo "DB_URL=$DB_URL" >> "$GITHUB_OUTPUT"
          echo "Using host ${HOST} (password hidden)."

      - name: Generate drift migration
        id: diff
        run: |
          set -e
          ts=$(date -u +"%Y%m%d%H%M%S")
          out="supabase/migrations/${ts}_remote_drift.sql"

          echo "Diffing LIVE → $out"
          supabase db diff \
            --db-url "${{ steps.makeurl.outputs.DB_URL }}" \
            --schema public \
            --schema storage \
            --schema auth \
            -f "$out" || true

          echo "----- migrations after diff -----"
          ls -la supabase/migrations || true

          if [ -s "$out" ]; then
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
            echo "file=$out" >> "$GITHUB_OUTPUT"
            echo "----- first 50 lines of generated file -----"
            head -n 50 "$out" || true
          else
            rm -f "$out"
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            echo "No drift detected (or empty diff)."
          fi

      - name: Open/Update PR with drift migration
        if: steps.diff.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          title: "chore(db): sync ${{
            github.event.inputs.target || 'DEV'
          }} schema drift"
          commit-message: "chore(db): add migration generated from ${{ github.event.inputs.target || 'DEV' }} live schema"
          branch: chore/db-remote-drift-${{ github.event.inputs.target || 'DEV' }}
          base: main
          add-paths: |
            supabase/migrations/**
          body: |
            Generated by `supabase db diff` from the ${{ github.event.inputs.target || 'DEV' }} project.
            Schemas included: public, storage, auth.
            Review & merge to keep Git the source of truth.
